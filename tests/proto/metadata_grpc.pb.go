// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: metadata.proto

package metadata

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetadataX_ListServices_FullMethodName   = "/kratos.api.MetadataX/ListServices"
	MetadataX_GetServiceDesc_FullMethodName = "/kratos.api.MetadataX/GetServiceDesc"
)

// MetadataXClient is the client API for MetadataX service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataXClient interface {
	// ListServices list the full name of all services.
	ListServices(ctx context.Context, in *XListServicesRequest, opts ...grpc.CallOption) (*XListServicesReply, error)
	// GetServiceDesc get the full fileDescriptorSet of service.
	GetServiceDesc(ctx context.Context, in *XGetServiceDescRequest, opts ...grpc.CallOption) (*XGetServiceDescReply, error)
}

type metadataXClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataXClient(cc grpc.ClientConnInterface) MetadataXClient {
	return &metadataXClient{cc}
}

func (c *metadataXClient) ListServices(ctx context.Context, in *XListServicesRequest, opts ...grpc.CallOption) (*XListServicesReply, error) {
	out := new(XListServicesReply)
	err := c.cc.Invoke(ctx, MetadataX_ListServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataXClient) GetServiceDesc(ctx context.Context, in *XGetServiceDescRequest, opts ...grpc.CallOption) (*XGetServiceDescReply, error) {
	out := new(XGetServiceDescReply)
	err := c.cc.Invoke(ctx, MetadataX_GetServiceDesc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataXServer is the server API for MetadataX service.
// All implementations must embed UnimplementedMetadataXServer
// for forward compatibility
type MetadataXServer interface {
	// ListServices list the full name of all services.
	ListServices(context.Context, *XListServicesRequest) (*XListServicesReply, error)
	// GetServiceDesc get the full fileDescriptorSet of service.
	GetServiceDesc(context.Context, *XGetServiceDescRequest) (*XGetServiceDescReply, error)
	mustEmbedUnimplementedMetadataXServer()
}

// UnimplementedMetadataXServer must be embedded to have forward compatible implementations.
type UnimplementedMetadataXServer struct {
}

func (UnimplementedMetadataXServer) ListServices(context.Context, *XListServicesRequest) (*XListServicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedMetadataXServer) GetServiceDesc(context.Context, *XGetServiceDescRequest) (*XGetServiceDescReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceDesc not implemented")
}
func (UnimplementedMetadataXServer) mustEmbedUnimplementedMetadataXServer() {}

// UnsafeMetadataXServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataXServer will
// result in compilation errors.
type UnsafeMetadataXServer interface {
	mustEmbedUnimplementedMetadataXServer()
}

func RegisterMetadataXServer(s grpc.ServiceRegistrar, srv MetadataXServer) {
	s.RegisterService(&MetadataX_ServiceDesc, srv)
}

func _MetadataX_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XListServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataXServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataX_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataXServer).ListServices(ctx, req.(*XListServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetadataX_GetServiceDesc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XGetServiceDescRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataXServer).GetServiceDesc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetadataX_GetServiceDesc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataXServer).GetServiceDesc(ctx, req.(*XGetServiceDescRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetadataX_ServiceDesc is the grpc.ServiceDesc for MetadataX service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetadataX_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kratos.api.MetadataX",
	HandlerType: (*MetadataXServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListServices",
			Handler:    _MetadataX_ListServices_Handler,
		},
		{
			MethodName: "GetServiceDesc",
			Handler:    _MetadataX_GetServiceDesc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metadata.proto",
}
