// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.2(blink)
// - protoc             v4.25.1
// source: metadata.proto

package metadata

import (
	context "context"
	http "github.com/blink-io/x/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationMetadataXGetServiceDesc = "/kratos.api.MetadataX/GetServiceDesc"
const OperationMetadataXListServices = "/kratos.api.MetadataX/ListServices"

type MetadataXHTTPServer interface {
	// GetServiceDesc GetServiceDesc get the full fileDescriptorSet of service.
	GetServiceDesc(context.Context, *XGetServiceDescRequest) (*XGetServiceDescReply, error)
	// ListServices ListServices list the full name of all services.
	ListServices(context.Context, *XListServicesRequest) (*XListServicesReply, error)
}

func RegisterMetadataXHTTPServer(s http.ServerRouter, srv MetadataXHTTPServer) {
	r := s.Route("/")
	r.GET("/x/services", _MetadataX_ListServices0_HTTP_Handler(srv))
	r.GET("/x/services/{name}", _MetadataX_GetServiceDesc0_HTTP_Handler(srv))
}

func _MetadataX_ListServices0_HTTP_Handler(srv MetadataXHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in XListServicesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetadataXListServices)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.ListServices(ctx, req.(*XListServicesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*XListServicesReply)
		return ctx.Result(200, reply)
	}
}

func _MetadataX_GetServiceDesc0_HTTP_Handler(srv MetadataXHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in XGetServiceDescRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMetadataXGetServiceDesc)
		h := ctx.Middleware(func(ctx context.Context, req any) (any, error) {
			return srv.GetServiceDesc(ctx, req.(*XGetServiceDescRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*XGetServiceDescReply)
		return ctx.Result(200, reply)
	}
}

type MetadataXHTTPClient interface {
	GetServiceDesc(ctx context.Context, req *XGetServiceDescRequest, opts ...http.CallOption) (rsp *XGetServiceDescReply, err error)
	ListServices(ctx context.Context, req *XListServicesRequest, opts ...http.CallOption) (rsp *XListServicesReply, err error)
}

type MetadataXHTTPClientImpl struct {
	cc *http.Client
}

func NewMetadataXHTTPClient(client *http.Client) MetadataXHTTPClient {
	return &MetadataXHTTPClientImpl{client}
}

func (c *MetadataXHTTPClientImpl) GetServiceDesc(ctx context.Context, in *XGetServiceDescRequest, opts ...http.CallOption) (*XGetServiceDescReply, error) {
	var out XGetServiceDescReply
	pattern := "/x/services/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMetadataXGetServiceDesc))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *MetadataXHTTPClientImpl) ListServices(ctx context.Context, in *XListServicesRequest, opts ...http.CallOption) (*XListServicesReply, error) {
	var out XListServicesReply
	pattern := "/x/services"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMetadataXListServices))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
