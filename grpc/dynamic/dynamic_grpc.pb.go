// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: dynamic.proto

package dynamic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dynamic_Unary_FullMethodName = "/Dynamic/Unary"
)

// DynamicClient is the client API for Dynamic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DynamicClient interface {
	// Unary requests
	Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error)
}

type dynamicClient struct {
	cc grpc.ClientConnInterface
}

func NewDynamicClient(cc grpc.ClientConnInterface) DynamicClient {
	return &dynamicClient{cc}
}

func (c *dynamicClient) Unary(ctx context.Context, in *UnaryRequest, opts ...grpc.CallOption) (*UnaryResponse, error) {
	out := new(UnaryResponse)
	err := c.cc.Invoke(ctx, Dynamic_Unary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DynamicServer is the server API for Dynamic service.
// All implementations must embed UnimplementedDynamicServer
// for forward compatibility
type DynamicServer interface {
	// Unary requests
	Unary(context.Context, *UnaryRequest) (*UnaryResponse, error)
	mustEmbedUnimplementedDynamicServer()
}

// UnimplementedDynamicServer must be embedded to have forward compatible implementations.
type UnimplementedDynamicServer struct {
}

func (UnimplementedDynamicServer) Unary(context.Context, *UnaryRequest) (*UnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedDynamicServer) mustEmbedUnimplementedDynamicServer() {}

// UnsafeDynamicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DynamicServer will
// result in compilation errors.
type UnsafeDynamicServer interface {
	mustEmbedUnimplementedDynamicServer()
}

func RegisterDynamicServer(s grpc.ServiceRegistrar, srv DynamicServer) {
	s.RegisterService(&Dynamic_ServiceDesc, srv)
}

func _Dynamic_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dynamic_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicServer).Unary(ctx, req.(*UnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dynamic_ServiceDesc is the grpc.ServiceDesc for Dynamic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dynamic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Dynamic",
	HandlerType: (*DynamicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Dynamic_Unary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dynamic.proto",
}
