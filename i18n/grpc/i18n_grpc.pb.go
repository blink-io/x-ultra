// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: i18n.proto

package grpc

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	I18N_ListLanguages_FullMethodName = "/I18N/ListLanguages"
)

// I18NClient is the client API for I18N service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type I18NClient interface {
	// ListLanguages
	ListLanguages(ctx context.Context, in *ListLanguagesRequest, opts ...grpc.CallOption) (*ListLanguagesResponse, error)
}

type i18NClient struct {
	cc grpc.ClientConnInterface
}

func NewI18NClient(cc grpc.ClientConnInterface) I18NClient {
	return &i18NClient{cc}
}

func (c *i18NClient) ListLanguages(ctx context.Context, in *ListLanguagesRequest, opts ...grpc.CallOption) (*ListLanguagesResponse, error) {
	out := new(ListLanguagesResponse)
	err := c.cc.Invoke(ctx, I18N_ListLanguages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// I18NServer is the server API for I18N service.
// All implementations must embed UnimplementedI18NServer
// for forward compatibility
type I18NServer interface {
	// ListLanguages
	ListLanguages(context.Context, *ListLanguagesRequest) (*ListLanguagesResponse, error)
	mustEmbedUnimplementedI18NServer()
}

// UnimplementedI18NServer must be embedded to have forward compatible implementations.
type UnimplementedI18NServer struct {
}

func (UnimplementedI18NServer) ListLanguages(context.Context, *ListLanguagesRequest) (*ListLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLanguages not implemented")
}
func (UnimplementedI18NServer) mustEmbedUnimplementedI18NServer() {}

// UnsafeI18NServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to I18NServer will
// result in compilation errors.
type UnsafeI18NServer interface {
	mustEmbedUnimplementedI18NServer()
}

func RegisterI18NServer(s grpc.ServiceRegistrar, srv I18NServer) {
	s.RegisterService(&I18N_ServiceDesc, srv)
}

func _I18N_ListLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLanguagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(I18NServer).ListLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: I18N_ListLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(I18NServer).ListLanguages(ctx, req.(*ListLanguagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// I18N_ServiceDesc is the grpc.ServiceDesc for I18N service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var I18N_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "I18N",
	HandlerType: (*I18NServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLanguages",
			Handler:    _I18N_ListLanguages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "i18n.proto",
}
